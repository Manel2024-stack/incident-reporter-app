pipeline {
  agent any

  environment {
    COMPOSE_PROJECT_NAME = "incident-reporter"
  }

  stages {

    stage('🧹 Nettoyage environnement') {
      steps {
        echo "🧨 Suppression des anciens conteneurs et volumes..."
        sh '''
          docker rm -f incident-reporter-api incident-reporter-mongo || true
          docker volume rm incident-reporter-pipeline_mongo-data || true
        '''
      }
    }

    stage('🔐 Login Docker Hub') {
      steps {
        withCredentials([usernamePassword(
          credentialsId: 'dockerhub-creds',
          usernameVariable: 'DOCKER_USER',
          passwordVariable: 'DOCKER_PASS'
        )]) {
          sh '''
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
          '''
        }
      }
    }

    stage('⚙️ Build des conteneurs') {
      steps {
        sh 'docker-compose build'
      }
    }

    stage("📤 Push de l'image vers Docker Hub") {
      steps {
        sh 'docker push manel2024/incident-reporter-api:latest'
      }
    }

    stage('🚀 Déploiement') {
      steps {
        sh '''
          docker-compose down
          docker-compose up -d
        '''
      }
    }

    stage('🧪 Vérification de l\'API') {
  steps {
    echo '⏳ Attente du démarrage de l\'API...'
    sh '''
      sleep 10
      echo '✅ Test de l\'API à l\'intérieur du conteneur...'
      sh 'docker exec incident-reporter-api curl --fail http://localhost:3000/status || exit 1'
    '''
  }
}

  }

  post {
    success {
      echo '✅ Déploiement réussi !'
    }
    failure {
      echo '❌ Une erreur est survenue pendant le pipeline.'
    }
  }
}
