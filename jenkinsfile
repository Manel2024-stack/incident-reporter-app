pipeline {
  agent any

  environment {
    COMPOSE_PROJECT_NAME = "incident-reporter"
  }

  stages {

    stage('🧹 Nettoyage environnement') {
      steps {
        echo "🧨 Suppression des anciens conteneurs et volumes..."
        sh '''
          docker rm -f incident-reporter-api incident-reporter-frontend incident-reporter-mongo || true
          docker volume rm incident-reporter-pipeline_mongo-data || true
        '''
      }
    }

    stage('🔐 Login Docker Hub') {
      steps {
        withCredentials([usernamePassword(
          credentialsId: 'dockerhub-creds',
          usernameVariable: 'DOCKER_USER',
          passwordVariable: 'DOCKER_PASS'
        )]) {
          sh '''
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
          '''
        }
      }
    }

    stage('🧪 Tests unitaires backend') {
      steps {
        dir('backend') {
          echo "🧪 Lancement des tests backend..."
          sh '''
            npm install
            npm test || exit 1
          '''
        }
      }
    }

    stage('⚙️ Build des conteneurs') {
      steps {
        sh 'docker-compose build'
      }
    }

    stage('🔎 Scan de sécurité avec Trivy (backend + frontend)') {
      steps {
        echo "🛡️ Analyse des images avec Trivy..."
        sh '''
          if ! command -v trivy > /dev/null; then
            echo "🚨 Trivy n'est pas installé sur l'agent Jenkins."
            exit 1
          fi

          trivy image --severity HIGH,CRITICAL --exit-code 0 incident-reporter-api
          trivy image --severity HIGH,CRITICAL --exit-code 0 incident-reporter-frontend
        '''
      }
    }

    stage("📤 Push des images vers Docker Hub") {
      steps {
        sh '''
          docker tag incident-reporter-api manel2024/incident-reporter-api:latest
          docker tag incident-reporter-frontend manel2024/incident-reporter-frontend:latest

          docker push manel2024/incident-reporter-api:latest
          docker push manel2024/incident-reporter-frontend:latest
        '''
      }
    }

    stage('🚀 Déploiement') {
      steps {
        sh '''
          docker-compose down
          docker-compose up -d
        '''
      }
    }

    stage('🧪 Vérification des services') {
      steps {
        echo '⏳ Attente du démarrage...'
        sh '''
          sleep 10
          echo '✅ Test de l\'API backend...'
          curl --fail http://192.168.8.4:3000/status || exit 1

          echo '🌐 Test du frontend (vérification HTTP 200)...'
          curl --fail http://localhost || exit 1
        '''
      }
    }
  }

  post {
    success {
      echo '✅ Déploiement complet réussi !'
    }
    failure {
      echo '❌ Une erreur est survenue pendant le pipeline.'
    }
  }
}
